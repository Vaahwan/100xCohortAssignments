/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  const path = require('path')
  const fs = require('fs')
  
  const app = express();
  app.use(bodyParser.json());

  const findIndexOf = (arr,id)=>{
    for(let i=0; i<arr.length; i++){
      if(arr[i].id==id){
        return i;
      }
    }
    return -1;
  }

  app.get('/',(req,res)=>{
    res.send("hello world")
  })

  app.get('/todos',(req,res)=>{
    const pathname = path.join(__dirname,'./todos.json');
    fs.readFile(pathname,'utf8',(err,data)=>{
      if(err){
        res.send('path not found').status(404);
      }
      res.send(JSON.parse(data));
    })
  })

  app.get(`/todos/:id`,(req,res)=>{
    const id = req.params.id;
    const pathname = path.join(__dirname,'./todos.json');
    fs.readFile(pathname,'utf8',(err,data)=>{
      if(err){
        res.send('path not found').status(404);
      }
      const todos = JSON.parse(data);
      const index = findIndexOf(todos,id);
      if(index==-1){
        res.send(`given item can not be found`).status(404);
      }
      res.json(todos[index]);
    })
  })

  app.post('/todos',(req,res)=>{
    const todo = {
      id : Math.floor(Math.random() * 1000000),
      title : req.body.title,
      description : req.body.description
    }
    const pathname = path.join(__dirname,'./todos.json');
    fs.readFile(pathname,'utf8',(err,data)=>{
      if(err){
        res.send('cannot find pathname').status(404);
      }

      try{
        const todos = JSON.parse(data);
        todos.push(todo);
        const todosString = JSON.stringify(todos);
        fs.writeFile(pathname,todosString,'utf8',(err)=>{
          if(err){
            res.send('there is something wrong');
          }
          res.json(todo).status(201);
        })
      }
      catch(error){
        console.log(error);
      }
    })    
  })

  app.put('/todos/:id',(req,res)=>{
    const pathname = path.join(__dirname,'./todos.json');
    const id = req.params.id
    fs.readFile(pathname,'utf8',(err,data)=>{
      if(err){
        res.send('path not found').status(404);
      }
      
      try{
        const todos = JSON.parse(data);
        const index = findIndexOf(todos,id);
        const updatedTodo = {
          id : todos[index].id,
          title : req.body.title,
          description : req.body.description
        }
        todos[index] = updatedTodo;
        const todosString = JSON.stringify(todos)
        fs.writeFile(pathname,todosString,'utf8',(err)=>{
          if(err){
            res.send('cannot do update');
          }
          res.status(200).json(updatedTodo)
        })
      }
      catch(error){
        res.send(error);
      }
    })
  })

  app.delete('/todos/:id',(req,res)=>{
    const pathname = path.join(__dirname,'./todos.json');
    const id = parseInt(req.params.id)
    fs.readFile(pathname,'utf8',(err,data)=>{
      if(err){
        res.send('path not found').status(404);
      }
      
      try{
        const todos = JSON.parse(data);
        const index = findIndexOf(todos,id)
        const deletedTodo = todos.splice(index,1);
        const todosString = JSON.stringify(todos)
        fs.writeFile(pathname,todosString,'utf8',(err)=>{
          if(err){
            res.send('cannot do update');
          }
          res.status(200).json(deletedTodo);
        })
      }
      catch(error){
        res.send(error);
      }
    })
  })

  
  app.listen(5080,()=>{
    console.log("app is listening on port :",5080)
  });

  
  module.exports = app;